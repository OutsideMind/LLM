import streamlit as st
import uuid
from utils import format_math, process_thoughts
from src.model_manager import ModelManager
from src.image_generator import ImageGenerator
from src.config import MODEL_MAPPING
from ui.utraining import render_training_interface


def setup_page():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit"""
    st.set_page_config(
        page_title="AI Assistant Pro",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    # –ò–Ω–∂–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
    st.markdown("""
    <style>
        .chat-container {
            max-height: 70vh;
            overflow-y: auto;
            padding: 10px;
        }
        .stButton>button {
            width: 100%;
        }
        .stProgress > div > div > div > div {
            background-color: #4CAF50;
        }
    </style>
    """, unsafe_allow_html=True)


def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if "model_manager" not in st.session_state:
        st.session_state.model_manager = ModelManager()

    if "image_generator" not in st.session_state:
        st.session_state.image_generator = ImageGenerator()

    if "chats" not in st.session_state:
        st.session_state.chats: dict = {}

    if "active_chat" not in st.session_state:
        st.session_state.active_chat: str = None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    if "request_count" not in st.session_state:
        st.session_state.request_count = 0


def render_sidebar_controls() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        st.header("Control Panel")

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        selected_model = st.selectbox(
            "Model:",
            list(MODEL_MAPPING.keys()),
            key="model_selector"
        )

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        if st.button("üîÑ Apply Model", key="apply_model"):
            with st.spinner(f"Loading {selected_model}..."):
                try:
                    st.session_state.model_manager.start_server(selected_model)
                    st.success(f"{selected_model} activated!")
                except Exception as e:
                    st.error(f"Model error: {str(e)}")

        st.markdown("---")
        st.header("Operation Mode")
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
        mode = st.radio(
            "Select mode:",
            ["Text", "Image Generation", "Training"],
            key="mode_selector"
        )

        st.markdown("---")
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
        _render_chat_controls()

        # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if st.session_state.chats:
            _render_active_chat_selector()

        st.markdown("---")

    return mode


def _render_chat_controls():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏"""
    col1, col2 = st.columns([3, 1])
    with col1:
        if st.button("‚ú® New Chat", key="new_chat"):
            chat_id = str(uuid.uuid4())
            st.session_state.chats[chat_id] = {"messages": []}
            st.session_state.active_chat = chat_id
            st.rerun()
    with col2:
        if st.session_state.chats and st.button("üóëÔ∏è", key="delete_chat",
                                                help="Delete current chat"):
            if st.session_state.active_chat:
                del st.session_state.chats[st.session_state.active_chat]
                st.session_state.active_chat = next(iter(st.session_state.chats), None)
                st.rerun()


def _render_active_chat_selector():
    """–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
    options = list(st.session_state.chats.keys())
    selected = st.selectbox(
        "Active Chats:",
        options=options,
        index=options.index(st.session_state.active_chat) if st.session_state.active_chat else 0,
        format_func=lambda x: f"Chat {options.index(x) + 1}",
        key="chat_selector"
    )
    st.session_state.active_chat = selected


def render_chat_container(active_chat: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    with st.container():
        st.markdown('<div class="chat-container">', unsafe_allow_html=True)

        for msg in active_chat["messages"]:
            _render_message(msg)

        st.markdown('</div>', unsafe_allow_html=True)


def _render_message(msg: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    with st.chat_message(msg["role"]):
        if msg.get("type") == "image":
            st.image(msg["content"])
            if msg.get("seed"):
                st.caption(f"**Seed:** `{msg['seed']}`")
        elif msg.get("type") == "image_prompt":
            st.markdown(f"**Prompt:** {msg['content']}")
            if msg.get("negative_prompt"):
                st.caption(f"**Exclusions:** {msg['negative_prompt']}")
        else:
            content = format_math(process_thoughts(msg["content"]))
            st.markdown(content, unsafe_allow_html=True)


def handle_no_active_chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    st.info("Create a new chat using the sidebar controls")
    if st.button("Create First Chat"):
        chat_id = str(uuid.uuid4())
        st.session_state.chats[chat_id] = {"messages": []}
        st.session_state.active_chat = chat_id
        st.rerun()


def handle_text_mode(active_chat: dict):
    """–†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    if user_input := st.chat_input("Type your message..."):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_chat["messages"].append({"role": "user", "content": user_input})

        with st.chat_message("assistant"):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            try:
                response = st.session_state.model_manager.generate_response(user_input)
                st.markdown(response)
                active_chat["messages"].append({"role": "assistant", "content": response})
            except Exception as e:
                st.error(f"Error: {str(e)}")


def handle_image_mode(active_chat: dict):
    """–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    from ui.uimage import (
        render_lora_settings,
        render_image_size_settings,
        render_advanced_image_settings,
        handle_image_generation
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    with st.sidebar:
        render_lora_settings()
        width, height = render_image_size_settings()
        steps, guidance_scale, seed, strength, uploaded_image = render_advanced_image_settings()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
    st.session_state.update({
        'steps': steps,
        'guidance_scale': guidance_scale,
        'seed': seed,
        'strength': strength,
        'uploaded_image': uploaded_image,
        'width': width,
        'height': height
    })

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    handle_image_generation(active_chat, width, height)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    setup_page()
    initialize_session_state()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    mode = render_sidebar_controls()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —á–∞—Ç–æ–≤
    if not st.session_state.active_chat:
        handle_no_active_chat()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    active_chat = st.session_state.chats[st.session_state.active_chat]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    render_chat_container(active_chat)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if mode == "Text":
        handle_text_mode(active_chat)
    elif mode == "Image Generation":
        handle_image_mode(active_chat)
    elif mode == "Training":
        render_training_interface()


if __name__ == "__main__":
    main()